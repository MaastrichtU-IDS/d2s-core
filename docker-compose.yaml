version: "3"

services:

  graphdb:
    build:
      context: ./support/graphdb
      dockerfile: Dockerfile
      args:
        version: 9.1.1
    # build: ./support/graphdb
    # image: ontotext/graphdb:9.1.1-ee
    command: -Dgraphdb.home=/opt/graphdb/home -Dgraphdb.workbench.cors.enable=true
    volumes:
      - $PWD/workspace/graphdb:/opt/graphdb/home
      - $PWD/workspace/graphdb-import:/root/graphdb-import
    ports:
      - 7200:7200
    networks:
      - network
    restart: unless-stopped

  virtuoso:
    image: tenforce/virtuoso
    volumes:
      - $PWD/workspace/virtuoso:/data
    ports:
      - 8890:8890
      - 1111:1111
    environment:
      - DBA_PASSWORD=dba
      - SPARQL_UPDATE=true
      - DEFAULT_GRAPH=https://w3id.org/d2s/graph
      - VIRT_Parameters_DirsAllowed=., /usr/local/virtuoso-opensource/share/virtuoso/vad, /usr/local/virtuoso-opensource/var/lib/virtuoso/db
      - VIRT_SPARQL_ResultSetMaxRows=999999999999999999
      - VIRT_SPARQL_MaxQueryCostEstimationTime=0
      - VIRT_SPARQL_MaxQueryExecutionTime=14400
      - VIRT_VDB_VDBDisconnectTimeout=7200000
      - VIRT_Client_SQL_QUERY_TIMEOUT=14400000
      - VIRT_CLient_SQL_TXN_TIMEOUT=14400000
      - VIRT_Database_ErrorLogLevel=0 # default: 7 is maximum logs
      - VIRT_Parameters_Timeout=7200
      - VIRT_Parameters_TransactionAfterImageLimit=5000000000 # default is 50M
      - VIRT_Parameters_NumberOfBuffers=5450000 # Each buffer caches one 8K page of data and occupies approximately 8700 bytes of memory.
      - VIRT_Parameters_MaxDirtyBuffers=8000000
      # - VIRT_Parameters_MaxClientConnections		= 10 # Better to reduce if a lot of big requests
      # - VIRT_SPARQL_DefaultQuery=select distinct ?Concept where {[] a ?Concept} LIMIT 100
      # - VIRT_VDB_VDBDisconnectTimeout=7200000
      # - VIRT_Client_SQL_QUERY_TIMEOUT=14400000
      # - VIRT_CLient_SQL_TXN_TIMEOUT=14400000
    networks:
      - network
    restart: unless-stopped

  virtuoso-tmp:
    image: tenforce/virtuoso
    volumes:
      - $PWD/workspace/virtuoso-tmp:/data
    ports:
      - 8891:8890
      # - 1112:1111
    environment:
      - DBA_PASSWORD=dba
      - SPARQL_UPDATE=true
      - DEFAULT_GRAPH=https://w3id.org/d2s/graph
      - VIRT_Parameters_DirsAllowed=., /usr/local/virtuoso-opensource/share/virtuoso/vad, /usr/local/virtuoso-opensource/var/lib/virtuoso/db
      - VIRT_SPARQL_ResultSetMaxRows=999999999999999999
      - VIRT_SPARQL_MaxQueryCostEstimationTime=0
      - VIRT_SPARQL_MaxQueryExecutionTime=14400
      - VIRT_VDB_VDBDisconnectTimeout=7200000
      - VIRT_Client_SQL_QUERY_TIMEOUT=14400000
      - VIRT_CLient_SQL_TXN_TIMEOUT=14400000
      - VIRT_Database_ErrorLogLevel=0 # default: 7 is maximum logs
      - VIRT_Parameters_Timeout=7200
      - VIRT_Parameters_TransactionAfterImageLimit=5000000000 # default is 50M
      - VIRT_Parameters_NumberOfBuffers=5450000 # Each buffer caches one 8K page of data and occupies approximately 8700 bytes of memory.
      - VIRT_Parameters_MaxDirtyBuffers=8000000
    networks:
      - network
    restart: unless-stopped

  # http://localhost:8889/bigdata/#splash
  # https://hub.docker.com/r/lyrasis/blazegraph
  blazegraph:
    restart: unless-stopped
    image: lyrasis/blazegraph:2.1.5
    volumes:
      - $PWD/workspace/blazegraph:/data
      # - $PWD/workspace/RWStore.properties:/RWStore.properties
    ports:
      - 8082:8080
    networks:
      - network
    # environment:
    #   # Work for Ubuntu ($UID=1000 and 1000 in $GROUPS)
    #   - BLAZEGRAPH_UID=${UID}
    #   - BLAZEGRAPH_GID=${GID}

  # http://localhost:10035
  # Default login: test / xyzzy
  allegrograph:
    restart: unless-stopped
    image: franzinc/agraph:v6.6.0
    ports:
      - 10000-10035:10000-10035
    shm_size: 1g
    # volumes:
    #   - $PWD/workspace/allegrograph:/data
    networks:
      - network

  # http://localhost:8086
  # Default login: admin / Passw0rd1
  anzograph:
    restart: unless-stopped
    image: cambridgesemantics/anzograph:2.0.2 
    ports:
      - 8086:8080
      # - 8443:8443
    # volumes:
    #   - $PWD/workspace/anzograph:/opt/anzograph
    networks:
      - network

  drill:
    image: apache/drill:1.17.0
    # image: umids/apache-drill:1.17.0-100G
    ports:
      - 8048:8047
    command: /bin/bash
    tty: true
    volumes:
      - $PWD/workspace/input:/data:ro
      # - $PWD/workspace:/data:ro
    networks:
      - network
    restart: unless-stopped

  postgres:
    image: postgres:11
    environment:
      - POSTGRES_PASSWORD=postgres
      - POSTGRES_DB=db
    networks:
      - network
    restart: unless-stopped

  comunica:
    image: comunica/jquery-widget.js:latest
    # image: umids/comunica-sparql-widget:latest
    ports:
      - 8084:80
    volumes:
      - $PWD/workspace/comunica-settings.json:/usr/share/nginx/html/queries.json
      - $PWD/workspace/hdt-archives:/data
      # - $PWD/workspace/RWStore.properties:/RWStore.properties
    networks:
      - network
    restart: unless-stopped

  ldf-server:
    image: umids/ldf-server:latest
    command: /tmp/config.json
    ports:
      - 8085:3000
    volumes:
      - $PWD/workspace/hdt-archives:/data
      - $PWD/workspace/ldfserver-config.json:/tmp/config.json
    networks:
      - network
    restart: unless-stopped

  api:
    image: umids/d2s-api:latest
    ports: 
      - 8080:8080
    environment: 
      - ENDPOINT=http://graphdb:7200/repositories/test
    networks:
      - network
    restart: unless-stopped

  notebook:
    image: umids/jupyterlab:latest
    ports: 
      - 8888:8888
    volumes:
      - $PWD/workspace/notebooks:/notebooks
    environment: 
      - PASSWORD=password
      - GIT_URL=https://github.com/vemonet/translator-sparql-notebook
    networks:
      - network
    restart: unless-stopped

  filebrowser:
    image: umids/nginx-file-browser:latest
    ports:
      - 8081:80
    volumes:
      - $PWD/workspace/download/:/opt/www/files/
    restart: unless-stopped

  into-the-graph:
    image: umids/into-the-graph:latest
    ports:
      - 8079:5000
    networks:
      - network
    restart: unless-stopped

  proxy:
    image: jwilder/nginx-proxy:latest
    ports:
      - "80:80"
      - "443:443"
    volumes:
      - /var/run/docker.sock:/tmp/docker.sock:ro
    network_mode: "host"
    restart: unless-stopped

  rmljob:
    image: flink:1.9.1-scala_2.11
    expose:
      - "6123"
    ports:
      - "8078:8081"
    command: jobmanager
    environment:
      - JOB_MANAGER_RPC_ADDRESS=rmljob
    volumes:
      - $PWD/workspace/input:/mnt/data

  rmltask:
    image: flink:1.9.1-scala_2.11
    expose:
      - "6121"
      - "6122"
    depends_on:
      - rmljob
    command: taskmanager
    environment:
      - JOB_MANAGER_RPC_ADDRESS=rmljob
    volumes:
      - $PWD/workspace/input:/mnt/data

  # Pull Data2Services images
  d2s-bash-exec:
    image: umids/d2s-bash-exec:latest

  d2s-sparql-operations:
    image: umids/d2s-sparql-operations:latest

  autor2rml:
    image: umids/autor2rml:latest

  r2rml:
    image: umids/r2rml:latest

  xml2rdf:
    image: umids/xml2rdf:dev

  rdf-upload:
    image: umids/rdf-upload:latest

  hdt-cpp:
    image: rdfhdt/hdt-cpp:latest


networks:
  network:
    driver: bridge



# docker exec -it docker-compose_virtuoso_1 bash
# isql-v -U dba -P password
# ld_dir('output', '*.nq', 'http://test/');
# rdf_loader_run();

# One liner virtuoso bulk load:
#docker exec -it docker-compose_virtuoso_1 isql-v -U dba -P password exec="ld_dir('/usr/local/virtuoso-opensource/var/lib/virtuoso/db/output', '*.nq', 'http://test/'); rdf_loader_run();"
#docker exec -it docker-compose_virtuoso_1 isql-v -U dba -P password exec="ld_dir('output', '*.nq', 'http://test/'); rdf_loader_run();"

# Reset triplestore:
#docker exec -it docker-compose_virtuoso_1 isql-v -U dba -P password exec="RDF_GLOBAL_RESET ();"

# Try to load with RdfUpload
# docker run -it --rm --net docker-compose_network -v $PWD/workspace/output:/data umids/rdf-upload -if "/data" -url "http://virtuoso:8890" -un "dba" -pw "password"

# sparql-operations works though
# docker run -it --net docker-compose_network --rm umids/d2s-sparql-operations -op select -sp "select distinct ?Concept where {[] a ?Concept} LIMIT 1000" -ep "http://virtuoso:8890/sparql"
